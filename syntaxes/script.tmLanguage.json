{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Script",
  "patterns": [
    {"include": "#comments"},
    {"include": "#keywords"},
    {"include": "#strings"},
    {"include": "#numbers"},
    {"include": "#types"},
    {"include": "#functions"},
    {"include": "#variables"},
    {"include": "#operators"}
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.script",
          "match": "//.*$"
        },
        {
          "name": "comment.block.script",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.script",
          "match": "\\b(if|else|while|for|break|continue|return|match|async|await|try|catch|throw)\\b"
        },
        {
          "name": "keyword.other.script",
          "match": "\\b(fn|let|const|var|struct|enum|trait|impl|type|where|in|of|as|pub|mod|use)\\b"
        },
        {
          "name": "keyword.import.script",
          "match": "\\b(import|export|from|module)\\b"
        },
        {
          "name": "constant.language.script",
          "match": "\\b(true|false|null|undefined|None|Some|Ok|Err)\\b"
        },
        {
          "name": "storage.modifier.script",
          "match": "\\b(static|mut|ref)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.script",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.script",
              "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}|[0-7]{3}|[\\\\\"nrt0])"
            }
          ]
        },
        {
          "name": "string.quoted.single.script",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.script",
              "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}|[0-7]{3}|[\\\\\"nrt0])"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.script",
          "match": "\\b0x[0-9A-Fa-f_]+\\b"
        },
        {
          "name": "constant.numeric.binary.script",
          "match": "\\b0b[01_]+\\b"
        },
        {
          "name": "constant.numeric.octal.script",
          "match": "\\b0o[0-7_]+\\b"
        },
        {
          "name": "constant.numeric.float.script",
          "match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b"
        },
        {
          "name": "constant.numeric.integer.script",
          "match": "\\b[0-9][0-9_]*(i32|i64|u32|u64)?\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.script",
          "match": "\\b(i32|i64|u32|u64|f32|f64|bool|string|char|void|any)\\b"
        },
        {
          "name": "support.type.builtin.script",
          "match": "\\b(Array|Vec|HashMap|HashSet|Option|Result|String|Box)\\b"
        },
        {
          "name": "entity.name.type.script",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.script",
          "match": "\\b(fn)\\s+([a-z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {"name": "keyword.other.fn.script"},
            "2": {"name": "entity.name.function.script"}
          }
        },
        {
          "name": "support.function.builtin.script",
          "match": "\\b(print|println|format|panic|assert|debug|error|warn|info)\\b"
        },
        {
          "name": "meta.function-call.script",
          "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {"name": "entity.name.function.script"}
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.script",
          "match": "\\b(let|const|var)\\s+([a-z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {"name": "keyword.other.script"},
            "2": {"name": "variable.other.script"}
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.script",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.script",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.logical.script",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.assignment.script",
          "match": "(=|\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.arrow.script",
          "match": "(->|=>)"
        }
      ]
    }
  },
  "scopeName": "source.script"
}